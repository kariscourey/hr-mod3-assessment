O(nlogn) worst-case complexity means that, in the worst case, as the number of elements to be computed increases linearly (e.g. 1, 2, 3 elements), the computational steps (representative of time) quadratically increases (e.g. 1, 4, 9 steps). This is usually the case with a divide-and-conquer algorithm, in which the problem is split into smaller problems that are then each addressed. O(nlogn) is relatively poor among the worst-case time complexities, with O(n), O(logn), and O(1) being better, and O(n2), O(2^n), and O(n!) being worse. Merge sort, for example, is each exemplified by a worst-case complexity of O(nlogn).
