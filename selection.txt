Selection sort is an inefficient sorting algorithm characterized by worst- and average-case time complexities of O(n2) (which indicates that, for n elements in the list input, n2 computational steps (representative of time) are required) and O(c) memory use (which indicates that, for n elements in the list input, a constant amount of memory is used). It takes a list as input and leverages a nested for loop to sort the list; no recursive calls are made with selection sort.
With the algorithm, the index of the minimum value in the list is first swapped with the first element in the list; then, the index of the second smallest value is swapped with the second element in the list; this repeats until the end of the list is reached. With each repetition, it is guaranteed that the element swapped at the smaller of the two indices is in its correct placement (i.e. on the first loop, after swapping, itâ€™s guaranteed the first item in the list has the minimum value). This is achieved by the following methods.
The outer for loop iterates through the range of 0 to the length of the list. For each ith iteration of the outer loop, a variable which represents the minimum value index is defined and assigned a value of i. The inner loop then iterates through the range of (i+1) to the length of the list. For each jth iteration of the inner loop, the value of the element in the list at the minimum value index is compared to the value of the element in the list at the jth index. If the former is greater than the latter, the minimum value index is assigned to j. Upon completion of the inner for loop, the values at index i and at the minimum value index are swapped.
