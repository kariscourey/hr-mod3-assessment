Quick sort is a divide-and-conquer algorithm, which indicates it divides the problem at hand into smaller problems of the same type, and it applies the same logic to each of the smaller problems. It is characterized by worst- and average-case time complexities of O(n2) (which indicates that, for n elements in the list input, n2 computational steps (representative of time) are required) and O(nlogn) (which indicates that, for n elements in the list input, nlogn computational steps (representative of time) are required) and O(logn) memory use (which indicates that, for n elements in the list input, logn memory is used). Recursive calls are made with quick sort.
With the algorithm, a value in the list is identified as the pivot (the last or first value in the list is often selected). All values less than the pivot are moved to the left of the list, and all values greater than the pivot are moved to the right of the list. The pivot is then placed between the left and right. The sorting function is then applied recursively to the left and right portions of the list. This is achieved by the following methods.
A function, often called partition, takes a list; left, the index of the leftmost element; and right, the index value of the rightmost element, as input. A variable, pivot, is defined as the value at the index of right in the list. A variable, star, is defined as one less than left. Then, a for loop iterates through the range from left to right. For each ith iteration, the value at index i is compared to pivot. If the former is less than or equal to the latter, star is incremented by one and the value at index star is swapped with the value at index i. Once the loop is complete, star is incremented by one, and the value at index star is swapped with the value at index right. Star is then returned.
Another function, often called quicksort, takes a list; left, the index of the leftmost element, which defaults to None (or null); and right, the index value of the rightmost element, which defaults to None (or null), as input. If both left and right are None (or null), left is set to 0 and right is set to one less than the length of the list. If left is greater than or equal to right or left is less than 0, quicksort returns None (or null). Else, a variable, p, is assigned to the return value of the function partition with inputs of the list, left, and right. Quicksort is then recursively called on the left elements of the list with inputs of the list, left, and one less than p. Quicksort is then also recursively called on the right elements of the list with inputs of the list, one greater than p, and right.
