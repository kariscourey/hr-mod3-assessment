Merge sort first takes in an array, left (a left index), and right (a right index) as input. Then, left is compared to right. If left is less than right, the middle is calculated as the floored average of left and right. Merge sort then calls itself recursively with the inputs of an array, middle (the middle index), and left (the left index); this functionally sorts the left half elements of the array. Merge sort then calls itself recursively again with the inputs of an array, middle + 1 (one greater than the middle index), and right (the right index); this functionally sorts the right half elements of the array. Lastly, the function merge is called, with inputs of an array, left (the left index), middle (the middle index), and right (the right index). If left is not less than right, the above doesn't occur.

The merge function first takes in an array, left (the left index), middle (the middle index), and right (the right index). Variable right_start is then assigned to middle + 1, and the value at middle is compared to that at right_start. If the value at middle is less than or equal to the value at right_start, the function immediately returns; this acts as the terminal case. Then, the first element of the left and right portions of the array are repeatedly compared in a loop; while left is less than or equal to middle and right_start is less than or equal to right, the value at left and the value at right_start are compared. If the value at left is less than or equal to the value at right_start, left is incremented by one, functionally identifying those elements are sorted. Otherwise, a swap needs to occur. A swap occurs by first identifying the value at right_start as the variable value and the index of right_start as the variable index. Then, all values are moved to the right using a loop; while index isn't equal to left, the value at index is set to the value at the element right before index, and index is decremented by one. The value variable, as previously defined, is then assigned to the value at index left, which stores that value in a different place. Lastly, all indexes - left, middle, and right_start, are incremented.

Recursive calls are made with merge sort, as described above. Worst- and average-case time complexities are O(n logn). Merge sort is a "divide and conquer" algorithm.
